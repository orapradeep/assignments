{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 25.56]\n",
      " [ 26.  ]\n",
      " [ 26.53]\n",
      " ..., \n",
      " [ 41.74]\n",
      " [ 40.69]\n",
      " [ 41.68]]\n"
     ]
    },
    {
     "ename": "SyntaxError",
     "evalue": "'return' outside function (<ipython-input-26-f5d4848a8991>, line 41)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-26-f5d4848a8991>\"\u001b[1;36m, line \u001b[1;32m41\u001b[0m\n\u001b[1;33m    return oil[1]/oil[1-10]\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m 'return' outside function\n"
     ]
    }
   ],
   "source": [
    "import Quandl\n",
    "import gzip\n",
    "import simplejson as json\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import Imputer\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.feature_extraction import DictVectorizer\n",
    "from sklearn.feature_extraction.text import TfidfTransformer\n",
    "from sklearn.linear_model import RidgeCV\n",
    "from sklearn.linear_model import LassoCV\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.base import BaseEstimator, ClassifierMixin, RegressorMixin\n",
    "from sklearn.pipeline import FeatureUnion\n",
    "from sklearn import linear_model\n",
    "import urllib\n",
    "import pickle\n",
    "import dill\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "\n",
    "\n",
    "authtoken = None\n",
    "\n",
    "\n",
    "def getQuandle(what):\n",
    "    \"\"\" \n",
    "    Wrapper around Quandl requests, using authtoken only if available\n",
    "    \"\"\"\n",
    "    if authtoken:\n",
    "        return Quandl.get(what, authtoken=authtoken)\n",
    "    else:\n",
    "        return Quandl.get(what)\n",
    "\n",
    "oil = getQuandle(\"DOE/RWTC\")\n",
    "\n",
    "\n",
    "oilm=oil.as_matrix()\n",
    "print oilm\n",
    "return oil[1]/oil[1-10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              0\n",
      "0     22.129729\n",
      "1     23.412901\n",
      "2     23.691970\n",
      "3     22.431442\n",
      "4     22.997577\n",
      "5     22.986678\n",
      "6     28.892489\n",
      "7     30.250443\n",
      "8     32.265602\n",
      "9     30.971405\n",
      "10     0.038339\n",
      "11     0.035806\n",
      "12     0.030555\n",
      "13     0.031131\n",
      "14     0.030734\n",
      "15     0.030109\n",
      "16     0.027645\n",
      "17     0.030094\n",
      "18     0.027239\n",
      "19     0.027951\n",
      "20     0.870312\n",
      "21     0.882379\n",
      "22     1.015789\n",
      "23     0.948139\n",
      "24     1.027072\n",
      "25     1.087847\n",
      "26     1.200111\n",
      "27     0.966217\n",
      "28     1.074568\n",
      "29     1.030636\n",
      "...         ...\n",
      "7511   1.045424\n",
      "7512   1.065127\n",
      "7513   1.122864\n",
      "7514   1.071298\n",
      "7515   1.052703\n",
      "7516   1.017213\n",
      "7517   1.082152\n",
      "7518   1.086914\n",
      "7519   1.019717\n",
      "7520   1.000365\n",
      "7521   0.898636\n",
      "7522   0.879099\n",
      "7523   0.824843\n",
      "7524   0.810706\n",
      "7525   0.864786\n",
      "7526   0.896341\n",
      "7527   0.951824\n",
      "7528   0.957366\n",
      "7529   0.948542\n",
      "7530   1.012670\n",
      "7531   1.105797\n",
      "7532   1.084127\n",
      "7533   1.110636\n",
      "7534   1.141740\n",
      "7535   1.107465\n",
      "7536   1.106281\n",
      "7537   0.949370\n",
      "7538   0.914092\n",
      "7539   0.886292\n",
      "7540   0.899614\n",
      "\n",
      "[7541 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "for i in reversed(range(len(oilm))):\n",
    "    oilm[i]=oilm[i]/oilm[i-10]\n",
    "oil=pd.DataFrame(oilm)\n",
    "print oil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.10579651])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oilm[0-10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 0\n",
      "0     2.542764e+03\n",
      "1     6.571810e+12\n",
      "2     1.195860e+06\n",
      "3     2.007633e+22\n",
      "4     1.503196e+21\n",
      "5     2.323264e+22\n",
      "6     2.893837e+19\n",
      "7     8.757082e+21\n",
      "8     9.548403e+20\n",
      "9     2.834703e-09\n",
      "10    1.019600e-06\n",
      "11    5.667704e-10\n",
      "12    9.081885e-08\n",
      "13    4.568348e-13\n",
      "14    8.942919e-13\n",
      "15    3.468649e-13\n",
      "16    9.965104e-13\n",
      "17    1.273540e-13\n",
      "18    1.857577e-13\n",
      "19    1.513629e-03\n",
      "20    2.477238e+09\n",
      "21    4.181099e+09\n",
      "22    7.373593e+09\n",
      "23    4.682233e+09\n",
      "24    6.578996e+09\n",
      "25    7.429104e+09\n",
      "26    4.872857e+10\n",
      "27    4.252282e+10\n",
      "28    9.339679e+10\n",
      "29    6.629940e+10\n",
      "...            ...\n",
      "7511  1.774784e-02\n",
      "7512  9.568834e-09\n",
      "7513  1.816103e-04\n",
      "7514  3.224379e-15\n",
      "7515  2.747866e-14\n",
      "7516  5.994282e-15\n",
      "7517  6.832381e-13\n",
      "7518  1.732804e-14\n",
      "7519  1.120728e-13\n",
      "7520  6.197343e+06\n",
      "7521  3.877041e+01\n",
      "7522  7.249249e+07\n",
      "7523  2.964771e+03\n",
      "7524  2.116319e+14\n",
      "7525  2.940363e+13\n",
      "7526  1.618527e+14\n",
      "7527  1.095603e+12\n",
      "7528  4.399580e+13\n",
      "7529  8.668864e+12\n",
      "7530  1.596651e-07\n",
      "7531  3.692321e-02\n",
      "7532  2.061164e-08\n",
      "7533  6.182523e-04\n",
      "7534  8.793654e-15\n",
      "7535  5.301726e-14\n",
      "7536  8.653879e-15\n",
      "7537  1.035040e-12\n",
      "7538  2.463869e-14\n",
      "7539  1.158727e-13\n",
      "7540  5.496276e+06\n",
      "\n",
      "[7541 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "for i in reversed(range(len(oilm))):\n",
    "    oilm[i]=oilm[i]/oilm[i-10]\n",
    "oil=pd.DataFrame(oilm)\n",
    "print oil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
